import { readFileSync } from "fs";
import { resolve } from "path";
import onedarkTheme from "../themes/onedark.json" assert { type: "json" };
import githubLightTheme from "../themes/github-light.json" assert { type: "json" };
import draculaTheme from "../themes/dracula.json" assert { type: "json" };
import tokyoNightTheme from "../themes/tokyo-night.json" assert { type: "json" };
import simpleTheme from "../themes/simple.json" assert { type: "json" };
export const THEME_NAMES = ["onedark", "github-light", "dracula", "tokyo-night", "simple"];
export const DEFAULT_THEME = "onedark";
// Built-in themes are now bundled directly
export const themes = {
    onedark: onedarkTheme,
    "github-light": githubLightTheme,
    dracula: draculaTheme,
    "tokyo-night": tokyoNightTheme,
    simple: simpleTheme
};
export function isValidTheme(theme) {
    return THEME_NAMES.includes(theme);
}
export function getThemeNames() {
    return THEME_NAMES;
}
export function getTheme(theme) {
    return themes[theme];
}
export function getDefaultTheme() {
    return DEFAULT_THEME;
}
export function loadCustomTheme(themePath) {
    try {
        const absolutePath = resolve(themePath);
        const themeContent = readFileSync(absolutePath, 'utf-8');
        const customTheme = JSON.parse(themeContent);
        const requiredKeys = Object.keys(themes.onedark);
        const customKeys = Object.keys(customTheme);
        const missingKeys = requiredKeys.filter(key => !customKeys.includes(key));
        if (missingKeys.length > 0) {
            throw new Error(`Custom theme is missing required properties: ${missingKeys.join(', ')}`);
        }
        return customTheme;
    }
    catch (error) {
        if (error instanceof Error) {
            throw new Error(`Failed to load custom theme from ${themePath}: ${error.message}`);
        }
        throw new Error(`Failed to load custom theme from ${themePath}`);
    }
}
export function resolveTheme(themeInput) {
    if (isValidTheme(themeInput)) {
        return getTheme(themeInput);
    }
    return loadCustomTheme(themeInput);
}
export function isCustomTheme(themeInput) {
    return !isValidTheme(themeInput);
}
//# sourceMappingURL=themes.js.map