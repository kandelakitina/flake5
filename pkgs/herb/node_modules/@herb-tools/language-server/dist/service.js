"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const settings_1 = require("./settings");
const document_service_1 = require("./document_service");
const diagnostics_1 = require("./diagnostics");
const parser_service_1 = require("./parser_service");
const linter_service_1 = require("./linter_service");
const config_1 = require("./config");
const project_1 = require("./project");
const formatting_service_1 = require("./formatting_service");
class Service {
    constructor(connection, params) {
        this.connection = connection;
        this.settings = new settings_1.Settings(params, this.connection);
        this.documentService = new document_service_1.DocumentService(this.connection);
        this.project = new project_1.Project(connection, this.settings.projectPath.replace("file://", ""));
        this.parserService = new parser_service_1.ParserService();
        this.linterService = new linter_service_1.LinterService(this.settings);
        this.formatting = new formatting_service_1.FormattingService(this.connection, this.documentService.documents, this.project, this.settings);
        this.diagnostics = new diagnostics_1.Diagnostics(this.connection, this.documentService, this.parserService, this.linterService);
        // Initialize global settings from initialization options
        if (params.initializationOptions) {
            this.settings.globalSettings = params.initializationOptions;
        }
    }
    async init() {
        await this.project.initialize();
        await this.formatting.initialize();
        this.config = await config_1.Config.fromPathOrNew(this.project.projectPath);
        // Only keep settings for open documents
        this.documentService.onDidClose((change) => {
            this.settings.documentSettings.delete(change.document.uri);
        });
        // The content of a text document has changed. This event is emitted
        // when the text document first opened or when its content has changed.
        this.documentService.onDidChangeContent(async (change) => {
            await this.diagnostics.refreshDocument(change.document);
        });
    }
    async refresh() {
        await this.project.refresh();
        await this.diagnostics.refreshAllDocuments();
    }
    async refreshConfig() {
        this.config = await config_1.Config.fromPathOrNew(this.project.projectPath);
        await this.formatting.refreshConfig();
    }
}
exports.Service = Service;
//# sourceMappingURL=service.js.map