"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinterService = void 0;
const node_1 = require("vscode-languageserver/node");
const linter_1 = require("@herb-tools/linter");
const node_wasm_1 = require("@herb-tools/node-wasm");
class LinterService {
    constructor(settings) {
        this.source = "Herb Linter ";
        this.settings = settings;
        this.linter = new linter_1.Linter(node_wasm_1.Herb);
    }
    async lintDocument(textDocument) {
        var _a, _b, _c, _d;
        const settings = await this.settings.getDocumentSettings(textDocument.uri);
        const linterEnabled = (_b = (_a = settings === null || settings === void 0 ? void 0 : settings.linter) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : true;
        if (!linterEnabled) {
            return { diagnostics: [] };
        }
        const lintResult = this.linter.lint(textDocument.getText(), { fileName: textDocument.uri });
        const excludedRules = (_d = (_c = settings === null || settings === void 0 ? void 0 : settings.linter) === null || _c === void 0 ? void 0 : _c.excludedRules) !== null && _d !== void 0 ? _d : ["parser-no-errors"];
        const offenses = lintResult.offenses.filter(offense => !excludedRules.includes(offense.rule));
        const diagnostics = offenses.map(offense => {
            const range = node_1.Range.create(node_1.Position.create(offense.location.start.line - 1, offense.location.start.column), node_1.Position.create(offense.location.end.line - 1, offense.location.end.column));
            const codeDescription = {
                href: `https://herb-tools.dev/linter/rules/${offense.rule}`
            };
            return {
                source: this.source,
                severity: this.lintToDignosticSeverity(offense.severity),
                range,
                message: offense.message,
                code: offense.rule,
                data: { rule: offense.rule },
                codeDescription
            };
        });
        return { diagnostics };
    }
    lintToDignosticSeverity(severity) {
        switch (severity) {
            case "error": return node_1.DiagnosticSeverity.Error;
            case "warning": return node_1.DiagnosticSeverity.Warning;
            case "info": return node_1.DiagnosticSeverity.Information;
            case "hint": return node_1.DiagnosticSeverity.Hint;
        }
    }
}
exports.LinterService = LinterService;
//# sourceMappingURL=linter_service.js.map