import type { SerializedParseResult } from "./parse-result.js";
import type { SerializedLexResult } from "./lex-result.js";
import type { ParserOptions } from "./parser-options.js";
interface LibHerbBackendFunctions {
    lex: (source: string) => SerializedLexResult;
    lexFile: (path: string) => SerializedLexResult;
    parse: (source: string, options?: ParserOptions) => SerializedParseResult;
    parseFile: (path: string) => SerializedParseResult;
    extractRuby: (source: string) => string;
    extractHTML: (source: string) => string;
    version: () => string;
}
export type BackendPromise = () => Promise<LibHerbBackend>;
declare const expectedFunctions: readonly ["parse", "lex", "parseFile", "lexFile", "extractRuby", "extractHTML", "version"];
type LibHerbBackendFunctionName = (typeof expectedFunctions)[number];
export declare function _TYPECHECK(): {
    checkFunctionsExist: true;
    checkInterfaceComplete: true;
};
export type LibHerbBackend = {
    [K in LibHerbBackendFunctionName]: LibHerbBackendFunctions[K];
};
export declare function isLibHerbBackend(object: any, libherbpath?: string): object is LibHerbBackend;
export declare function ensureLibHerbBackend(object: any, libherbpath?: string): LibHerbBackend;
export {};
