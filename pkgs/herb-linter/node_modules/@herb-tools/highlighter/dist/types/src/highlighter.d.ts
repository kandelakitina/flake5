import type { HerbBackend, Diagnostic } from "@herb-tools/core";
import type { ThemeInput } from "./themes.js";
export interface HighlightOptions {
    diagnostics?: Diagnostic[];
    splitDiagnostics?: boolean;
    contextLines?: number;
    focusLine?: number;
    showLineNumbers?: boolean;
    wrapLines?: boolean;
    maxWidth?: number;
    truncateLines?: boolean;
}
export interface HighlightDiagnosticOptions {
    contextLines?: number;
    showLineNumbers?: boolean;
    optimizeHighlighting?: boolean;
    wrapLines?: boolean;
    maxWidth?: number;
    truncateLines?: boolean;
}
export declare class Highlighter {
    private syntaxRenderer;
    private diagnosticRenderer;
    private fileRenderer;
    private initManager;
    private inlineDiagnosticRenderer;
    private fileReader;
    constructor(theme?: ThemeInput, herb?: HerbBackend);
    /**
     * Initialize the highlighter with the Herb backend
     * This must be called before using highlight() or highlightDiagnostic()
     */
    initialize(): Promise<void>;
    /**
     * Check if the highlighter has been initialized
     */
    get initialized(): boolean;
    requireInitialized(): void;
    /**
     * Main highlighting method with flexible rendering options
     * @param path - File path for annotation (display only, not used for reading)
     * @param content - The content to highlight
     * @param options - Configuration options
     *   - diagnostics: Array of diagnostics to display inline or split
     *   - splitDiagnostics: When true with diagnostics, render each diagnostic individually
     *   - contextLines: Number of context lines around focus/diagnostics
     *   - focusLine: Line number to focus on (shows only that line with dimmed context)
     *   - showLineNumbers: Whether to show line numbers (default: true)
     * @returns The highlighted content with optional diagnostics or focused view
     */
    highlight(path: string, content: string, options?: HighlightOptions): string;
    /**
     * Render a single diagnostic with context lines and syntax highlighting
     * @param path - The file path to display in the diagnostic (display only)
     * @param diagnostic - The diagnostic message to render
     * @param content - The content to highlight and render
     * @param options - Optional configuration
     * @returns The rendered diagnostic output with syntax highlighting
     */
    highlightDiagnostic(path: string, diagnostic: Diagnostic, content: string, options?: HighlightDiagnosticOptions): string;
    /**
     * Convenience method that reads a file and highlights it
     * @param filePath - Path to the file to read and highlight
     * @param options - Configuration options
     * @returns The highlighted file content with optional diagnostics
     */
    highlightFileFromPath(filePath: string, options?: HighlightOptions): string;
    /**
     * Convenience method that reads a file and renders a diagnostic
     * @param filePath - Path to the file to read
     * @param diagnostic - The diagnostic message to render
     * @param options - Optional configuration
     * @returns The highlighted diagnostic output
     */
    highlightDiagnosticFromPath(filePath: string, diagnostic: Diagnostic, options?: HighlightDiagnosticOptions): string;
}
/**
 * Convenience function to highlight content with a specific theme
 * @param content - The content to highlight
 * @param theme - The theme to use (defaults to "onedark")
 * @param options - Additional highlighting options
 * @returns The highlighted content
 */
export declare function highlightContent(content: string, theme?: ThemeInput, options?: HighlightOptions): Promise<string>;
/**
 * Convenience function to highlight a file with a specific theme
 * @param filePath - The path to the file to highlight
 * @param theme - The theme to use (defaults to "onedark")
 * @param options - Additional highlighting options
 * @returns The highlighted file content
 */
export declare function highlightFile(filePath: string, theme?: ThemeInput, options?: HighlightOptions): Promise<string>;
