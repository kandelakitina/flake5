import { LexResult } from "./lex-result.js";
import { ParseResult } from "./parse-result.js";
import type { LibHerbBackend, BackendPromise } from "./backend.js";
import type { ParserOptions } from "./parser-options.js";
/**
 * The main Herb parser interface, providing methods to lex and parse input.
 */
export declare abstract class HerbBackend {
    /** The backend instance handling lexing and parsing. */
    backend: LibHerbBackend | undefined;
    readonly backendPromise: BackendPromise;
    /**
     * Creates a new Herb instance.
     * @param backendPromise - A promise resolving to a `LibHerbBackend` implementation for lexing and parsing.
     * @throws Error if no valid backend is provided.
     */
    constructor(backendPromise: BackendPromise);
    /**
     * Loads the backend by resolving the backend promise.
     * @returns A promise containing the resolved `HerbBackend` instance after loading it.
     */
    load(): Promise<HerbBackend>;
    /**
     * Lexes the given source string into a `LexResult`.
     * @param source - The source code to lex.
     * @returns A `LexResult` instance.
     * @throws Error if the backend is not loaded.
     */
    lex(source: string): LexResult;
    /**
     * Lexes a file.
     * @param path - The file path to lex.
     * @returns A `LexResult` instance.
     * @throws Error if the backend is not loaded.
     */
    lexFile(path: string): LexResult;
    /**
     * Parses the given source string into a `ParseResult`.
     * @param source - The source code to parse.
     * @param options - Optional parsing options.
     * @returns A `ParseResult` instance.
     * @throws Error if the backend is not loaded.
     */
    parse(source: string, options?: ParserOptions): ParseResult;
    /**
     * Parses a file.
     * @param path - The file path to parse.
     * @returns A `ParseResult` instance.
     * @throws Error if the backend is not loaded.
     */
    parseFile(path: string): ParseResult;
    /**
     * Extracts embedded Ruby code from the given source.
     * @param source - The source code to extract Ruby from.
     * @returns The extracted Ruby code as a string.
     * @throws Error if the backend is not loaded.
     */
    extractRuby(source: string): string;
    /**
     * Extracts HTML from the given source.
     * @param source - The source code to extract HTML from.
     * @returns The extracted HTML as a string.
     * @throws Error if the backend is not loaded.
     */
    extractHTML(source: string): string;
    /**
     * Gets the Herb version information, including the core and backend versions.
     * @returns A version string containing backend, core, and libherb versions.
     * @throws Error if the backend is not loaded.
     */
    get version(): string;
    /**
     * Ensures that the backend is loaded.
     * @throws Error if the backend is not loaded.
     */
    ensureBackend(): asserts this is {
        backend: LibHerbBackend;
    };
    /**
     * Checks if the backend is loaded.
     * @returns True if the backend is loaded, false otherwise.
     */
    get isLoaded(): boolean;
    /**
     * Abstract method to get the backend version.
     * @returns A string representing the backend version.
     */
    abstract backendVersion(): string;
}
