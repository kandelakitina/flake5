import { isERBNode } from "@herb-tools/core";
import { ParserRule } from "../types.js";
import { BaseRuleVisitor } from "./rule-utils.js";
class RequireWhitespaceInsideTags extends BaseRuleVisitor {
    visitChildNodes(node) {
        this.checkWhitespace(node);
        super.visitChildNodes(node);
    }
    checkWhitespace(node) {
        if (!isERBNode(node)) {
            return;
        }
        const openTag = node.tag_opening;
        const closeTag = node.tag_closing;
        const content = node.content;
        if (!openTag || !closeTag || !content) {
            return;
        }
        const value = content.value;
        if (openTag.value === "<%#") {
            this.checkCommentTagWhitespace(openTag, closeTag, value);
        }
        else {
            this.checkOpenTagWhitespace(openTag, value);
            this.checkCloseTagWhitespace(closeTag, value);
        }
    }
    checkCommentTagWhitespace(openTag, closeTag, content) {
        if (!content.startsWith(" ") && !content.startsWith("\n") && !content.startsWith("=")) {
            this.addOffense(`Add whitespace after \`${openTag.value}\`.`, openTag.location, "error");
        }
        else if (content.startsWith("=") && content.length > 1 && !content[1].match(/\s/)) {
            this.addOffense(`Add whitespace after \`<%#=\`.`, openTag.location, "error");
        }
        if (!content.endsWith(" ") && !content.endsWith("\n")) {
            this.addOffense(`Add whitespace before \`${closeTag.value}\`.`, closeTag.location, "error");
        }
    }
    checkOpenTagWhitespace(openTag, content) {
        if (content.startsWith(" ") || content.startsWith("\n")) {
            return;
        }
        this.addOffense(`Add whitespace after \`${openTag.value}\`.`, openTag.location, "error");
    }
    checkCloseTagWhitespace(closeTag, content) {
        if (content.endsWith(" ") || content.endsWith("\n")) {
            return;
        }
        this.addOffense(`Add whitespace before \`${closeTag.value}\`.`, closeTag.location, "error");
    }
}
export class ERBRequireWhitespaceRule extends ParserRule {
    name = "erb-require-whitespace-inside-tags";
    check(result, context) {
        const visitor = new RequireWhitespaceInsideTags(this.name, context);
        visitor.visit(result.value);
        return visitor.offenses;
    }
}
//# sourceMappingURL=erb-require-whitespace-inside-tags.js.map