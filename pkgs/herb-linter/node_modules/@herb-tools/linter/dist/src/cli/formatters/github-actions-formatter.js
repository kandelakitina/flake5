import { BaseFormatter } from "./base-formatter.js";
// https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-commands
export class GitHubActionsFormatter extends BaseFormatter {
    static MESSAGE_ESCAPE_MAP = {
        '%': '%25',
        '\n': '%0A',
        '\r': '%0D'
    };
    static PARAM_ESCAPE_MAP = {
        '%': '%25',
        '\n': '%0A',
        '\r': '%0D',
        ':': '%3A',
        ',': '%2C'
    };
    async format(allDiagnostics) {
        for (const { filename, offense } of allDiagnostics) {
            this.formatDiagnostic(filename, offense);
        }
        if (allDiagnostics.length > 0) {
            console.log();
        }
    }
    formatFile(filename, diagnostics) {
        for (const diagnostic of diagnostics) {
            this.formatDiagnostic(filename, diagnostic);
        }
    }
    // GitHub Actions annotation format:
    // ::{level} file={file},line={line},col={col}::{message}
    //
    formatDiagnostic(filename, diagnostic) {
        const level = diagnostic.severity === "error" ? "error" : "warning";
        const { line, column } = diagnostic.location.start;
        const escapedFilename = this.escapeParam(filename);
        const message = this.escapeMessage(diagnostic.message);
        let fullMessage = message;
        if (diagnostic.code) {
            fullMessage += ` [${diagnostic.code}]`;
        }
        console.log(`\n::${level} file=${escapedFilename},line=${line},col=${column}::${fullMessage}`);
    }
    escapeMessage(string) {
        return string.replace(new RegExp(Object.keys(GitHubActionsFormatter.MESSAGE_ESCAPE_MAP).map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|'), 'g'), match => GitHubActionsFormatter.MESSAGE_ESCAPE_MAP[match]);
    }
    escapeParam(string) {
        return string.replace(new RegExp(Object.keys(GitHubActionsFormatter.PARAM_ESCAPE_MAP).map(k => k.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|'), 'g'), match => GitHubActionsFormatter.PARAM_ESCAPE_MAP[match]);
    }
}
//# sourceMappingURL=github-actions-formatter.js.map