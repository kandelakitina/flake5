import { BaseFormatter } from "./base-formatter.js";
import type { Diagnostic, SerializedDiagnostic } from "@herb-tools/core";
import type { ProcessedFile } from "../file-processor.js";
interface JSONOffense extends SerializedDiagnostic {
    filename: string;
}
interface JSONSummary {
    filesChecked: number;
    filesWithOffenses: number;
    totalErrors: number;
    totalWarnings: number;
    totalOffenses: number;
    ruleCount: number;
}
interface JSONTiming {
    startTime: string;
    duration: number;
}
export interface JSONOutput {
    offenses: JSONOffense[];
    summary: JSONSummary | null;
    timing: JSONTiming | null;
    completed: boolean;
    clean: boolean | null;
    message: string | null;
}
interface JSONFormatOptions {
    files: string[];
    totalErrors: number;
    totalWarnings: number;
    filesWithOffenses: number;
    ruleCount: number;
    startTime: number;
    startDate: Date;
    showTiming: boolean;
}
export declare class JSONFormatter extends BaseFormatter {
    format(allOffenses: ProcessedFile[]): Promise<void>;
    formatWithSummary(allOffenses: ProcessedFile[], options: JSONFormatOptions): Promise<void>;
    formatFile(_filename: string, _offenses: Diagnostic[]): void;
}
export {};
